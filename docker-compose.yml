version: "3.9"

services:
  redis:
    image: redis:6.2
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256MB
      restart_policy:
        condition: on-failure
        max_attempts: 3
        delay: 5s
        window: 20s
  kafka:
    image: apache/kafka:3.8.0
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CLUSTER_ID: "5L6g3nShT-eMCtK--X86sw"
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
    ports:
      - "9092:9092"
      - "9093:9093"
    volumes:
      - /var/lib/kafka/data
    networks:
      - app_network
    healthcheck:
      test: [ "CMD-SHELL", "/opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server kafka:9092 || exit 1" ]
      interval: 5s
      timeout: 5s
      retries: 5

  topic_creator:
    image: apache/kafka:3.8.0
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      sh -c "/opt/kafka/bin/kafka-topics.sh --create --topic __consumer_offsets --partitions 50 --replication-factor 1 --bootstrap-server kafka:9092; "
    networks:
      - app_network

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 9095:8080
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      - app_network

  elasticsearch:
    image: elasticsearch:7.17.18
    container_name: elasticsearch
    environment:
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - 9200:9200
    stdin_open: true
    tty: true
    networks:
      - app_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "50"
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2GB
        reservations:
          cpus: '1'
          memory: 1GB
      restart_policy:
        condition: on-failure
        max_attempts: 3
        delay: 5s
        window: 20s

  logstash:
    container_name: logstash
    image: logstash:7.17.18
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./logstash/logstash.template.json:/usr/share/logstash/templates/logstash.template.json
    ports:
      - 5044:5044
    links:
      - elasticsearch:elasticsearch
    depends_on:
      - elasticsearch
    stdin_open: true
    tty: true
    networks:
      - app_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "50"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512MB
      restart_policy:
        condition: on-failure
        max_attempts: 3
        delay: 5s
        window: 20s

  kibana:
    container_name: kibana
    image: kibana:7.17.18
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - 5601:5601
    links:
      - elasticsearch:elasticsearch
    depends_on:
      - elasticsearch
    stdin_open: true
    tty: true
    networks:
      - app_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "50"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512MB
      restart_policy:
        condition: on-failure
        max_attempts: 3
        delay: 5s
        window: 20s

  filebeat:
    user: root
    container_name: filebeat
    image: elastic/filebeat:7.17.18
    links:
      - logstash:logstash
    depends_on:
      - logstash
      - auth_service
      - products_service
    volumes:
      - /var/run/docker.sock:/host_docker/docker.sock
      - ./auth_service/logs:/usr/share/filebeat/auth_service
      - ./products_service/logs:/usr/share/filebeat/products_service
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
    command: [ "--strict.perms=false" ]
    ulimits:
      memlock:
        soft: -1
        hard: -1
    stdin_open: true
    tty: true
    networks:
      - app_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "50"
    deploy:
      mode: global
      resources:
        limits:
          cpus: '0.2'
          memory: 512MB
      restart_policy:
        condition: on-failure
        max_attempts: 3
        delay: 5s
        window: 20s

  db_auth:
    image: postgres:12-bullseye
    container_name: postgres_auth_db
    environment:
      POSTGRES_USER: storage_admin
      POSTGRES_PASSWORD: THw7l0bxvPPkWUhP
      POSTGRES_DB: strg_users_db
    ports:
      - "5435:5432"
    volumes:
      - ./docker-data/auth_db:/var/lib/postgresql/data
      - ./auth_service/db_init/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 512MB
      restart_policy:
        condition: on-failure
        max_attempts: 3
        delay: 5s
        window: 20s

  db_products:
    image: postgres:12-bullseye
    container_name: postgres_products_db
    environment:
      POSTGRES_USER: storage_admin
      POSTGRES_PASSWORD: THw7l0bxvPPkWUhP
      POSTGRES_DB: strg_products_db
    ports:
      - "5436:5432"
    volumes:
      - ./docker-data/products_db:/var/lib/postgresql/data
      - ./products_service/db_init/init_products.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 512MB
      restart_policy:
        condition: on-failure
        max_attempts: 3
        delay: 5s
        window: 20s

  auth_service:
    build:
      context: ./auth_service
      dockerfile: Dockerfile
    container_name: auth_service
    volumes:
      - ./auth_service/logs:/app/logs
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://storage_admin:THw7l0bxvPPkWUhP@db:5432/strg_users_db
      REDIS_HOST: redis
    ports:
      - "8001:8000"
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 512MB
      restart_policy:
        condition: on-failure
        max_attempts: 3
        delay: 5s
        window: 20s

  products_service:
    build:
      context: ./products_service
      dockerfile: Dockerfile
    container_name: products_service
    volumes:
      - ./products_service/logs:/app/logs
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://storage_admin:THw7l0bxvPPkWUhP@db_products:5432/strg_products_db
      REDIS_HOST: redis
    ports:
      - "8002:8000"
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 512MB
      restart_policy:
        condition: on-failure
        max_attempts: 3
        delay: 5s
        window: 20s

networks:
  app_network:
    driver: bridge
